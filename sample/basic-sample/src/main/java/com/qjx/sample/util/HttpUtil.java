package com.qjx.sample.util;

import ch.qos.logback.classic.Level;
import ch.qos.logback.classic.LoggerContext;
import java.io.IOException;
import java.nio.charset.Charset;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import java.util.function.Supplier;
import org.apache.http.Header;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.config.RequestConfig;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.client.methods.RequestBuilder;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.protocol.HTTP;
import org.apache.http.util.EntityUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * http请求工具类
 *
 * @author wangfenglei
 */
public class HttpUtil {

    public final static String Referer = "http://spf.szfcweb.com/szfcweb/(S(prputvacw2gbrx4ghh2xovd1))/DataSerach/CanSaleHouseSelectIndex.aspx";
    private static final List<Class<? extends Exception>> IGNORED_EXCEPTION =
            Arrays.asList(
                    SQLException.class
                    // IbatisException.class,
                    // BusinessException.class,
                    // TransientDataAccessException.class,
                    // RecoverableDataAccessException.class,
                    // RedisOperationException.class
            );
    private final static String __VIEWSTATE = "";
    private final static String __EVENTVALIDATION = "/wEdADFtmgOYiipOU6KpwjZX60a7caWap+vodpcfJeWCQMb05M4VqTsYgOfsOlUEYrae4TYXW3nnTZvfLJuJ/u1PBVBSt/Nk3qkzVt4LDvwX7cgTvYkzTrqoUXgX6b+M1+257BjiaVX7cykmOFdg82YZu5IQMBf49FkTYEncAueWObXIq7cL5eRoAUKa+tyOPRsEflZhNfTcFtQ/jJWSfVz1xbGeVES/tLbibOmxRliqKZ9Av3XwaHsfo1OzGqVWo4Bficqt+1JTGeZBIT00ywTRJldKK5TzTxr7qFCDynYLGZnNMfqGMDGeMYbiKTDJUCRj2tM/oGKi7P7atsa5aP0Vrd1vGtQCH61R1Y4V6Nctazplc0IITE8wDizpQ9putf/8wQ3GqI45ikaYA87mLWvQM3CAWHUVMBw/qtB1eub5Igma8zZ5Ykbu6BMbwzKZdzjwkbjd9+hlWj27Q5l2sHVlW3VXDhiU3viWGWFxCsV+pGhjFr8Ns8AqFApCmsmNtBy70E+IxvDda+xVsiuQoilT8PqARobHSasiLYnTj7coUDDUgUcmKAnDjTXnijkZ1Dchyq6LSv1d/KnQ6VOnpJCurY40v5h+Pvy+1zlJ5tXgUhgBA4NVg3pTa2cb71u+ezXY15TEeFLkkPQKidgOERR9vMYlB+NFkbLpLJuJb/g121pL///DH9WOMfXru2lKTlDSg9NENQWDWEq1w3Lah3ctaoqoqYJOpz7Ly22p9r11r0+mEganISjamjW8QDrVShexcS254qxmCALDdPyoeK1QL3zhbs6HlRhLNBkvf0YQYECGIAZSCfe6kCpi764MWHspW6eeDU10bAMkRZbsJDXDNUn9p5F7oCBSD9N3xuV7QSo2BEBPyeph8LlVbI468WJAWd1NFSai9piQ1sPlfOjsd42ROPwu/76uWP0KeCxxYR4TblMTBaWSYJ1ju3z7PuJ7hLCGCLqkvEvkne7uHfY1MC8CgoFwW/H1bo23D8FHRhv4hVT9SNDaZFtbLORMRN9tIGuGHLh/jCtBVGOvjETjTkTom3PNZYN/akoZyHMAVtwhlm6wSvX1EeiLAXZKdmixIY0=";
    private static Logger log = LoggerFactory.getLogger(HttpUtil.class);
    private static PoolingHttpClientConnectionManager connectionManager = null;
    private static HttpClientBuilder httpBuilder = null;
    private static RequestConfig requestConfig = null;
    /**
     * 最大连接连接数量
     */
    private static int MAX_CONNECTION = 100;
    /**
     * 最大并发请求数量
     */
    private static int DEFAULT_MAX_CONNECTION = 50;

    static {
        // 设置http的状态参数
        requestConfig = RequestConfig.custom()
                .setSocketTimeout(10000)
                .setConnectTimeout(10000)
                .setConnectionRequestTimeout(10000)
                .build();
        connectionManager = new PoolingHttpClientConnectionManager();
        connectionManager.setMaxTotal(MAX_CONNECTION);
        connectionManager.setDefaultMaxPerRoute(DEFAULT_MAX_CONNECTION);
        httpBuilder = HttpClients.custom();
        httpBuilder.setConnectionManager(connectionManager);
        LoggerContext loggerContext = (LoggerContext) LoggerFactory.getILoggerFactory();
        List<ch.qos.logback.classic.Logger> loggerList = loggerContext.getLoggerList();
        loggerList.forEach(logger -> {
            logger.setLevel(Level.INFO);
        });
    }

    /**
     * 获取http客户端连接
     *
     * @return http客户端连接
     */
    public static CloseableHttpClient getConnection() {
        return httpBuilder.build();
    }

    /**
     * http post请求，利用http请求池
     *
     * @param url 请求url
     * @return 请求结果
     * @throws Exception 异常
     */
    public static String httpPost(String url, Integer limit, boolean isFirst) throws Exception {
        Map<String, String> paramsMap = new HashMap<>();
        String __EVENTTARGET = "ctl00$MainContent$PageGridView1$ctl22$PageList";
        String pageSize = String.valueOf(limit);
        // if (!isFirst) {
        //     pageSize = String.valueOf(limit - 1);
        //     __EVENTTARGET = "ctl00$MainContent$PageGridView1$ctl22$Next";
        // } else {
        //     __EVENTTARGET = "ctl00$MainContent$PageGridView1$ctl22$First";
        //     pageSize = "1";
        // }
        paramsMap.put("__EVENTTARGET", __EVENTTARGET);
        paramsMap.put("__VIEWSTATE", __VIEWSTATE);
        paramsMap.put("__VIEWSTATEGENERATOR", "4A995636");
        paramsMap.put("__EVENTVALIDATION", __EVENTVALIDATION);
        paramsMap.put("Content-Length", "30957");
        paramsMap.put("ctl00$MainContent$txt_Pro", "和煦璟庭");
        paramsMap.put("ctl00$MainContent$ddl_qy", "RD005");
        paramsMap.put("ctl00$MainContent$rb_HF_CODE", "-1");
        paramsMap.put("ctl00$MainContent$ddl_houseclass", "1");
        paramsMap.put("ctl00$MainContent$PageGridView1$ctl22$PageList", pageSize);
        RequestBuilder post = RequestBuilder.post();
        post.addHeader("Referer", Referer);
        post.addHeader("Proxy-Connection", "keep-alive");
        post.addHeader("Origin", "http://spf.szfcweb.com");
        post.addHeader("Accept-Language", "zh-CN,zh;q=0.9,en;q=0.8,und;q=0.7,zh-TW;q=0.6,ja;q=0.5,it;q=0.4");
        post.addHeader("Cache-Control", "max-age=0");
        post.addHeader("Content-Type", "application/x-www-form-urlencoded");
        post.addHeader("User-Agent",
                "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.1 Safari/605.1.15");
        post.addHeader("Host", "spf.szfcweb.com");
        post.addHeader("Upgrade-Insecure-Requests", "1");
        post.addHeader("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
        List<NameValuePair> params = new ArrayList<>();
        for (Map.Entry<String, String> e : paramsMap.entrySet()) {
            NameValuePair pair = new BasicNameValuePair(e.getKey(), e.getValue());
            params.add(pair);
        }
        HttpUriRequest postMethod = post.setUri(url)
                .addParameters(params.toArray(new BasicNameValuePair[params.size()]))
                .setConfig(requestConfig).build();
        TimeUnit.SECONDS.sleep(1);
        HttpResponse response = getConnection().execute(postMethod);
        return EntityUtils.toString(response.getEntity());
    }

    /**
     * http post请求，利用http请求池
     *
     * @param url       请求url
     * @param paramsMap 请求参数
     * @return 请求结果
     * @throws Exception 异常
     */
    public static String httpPost(String url, Map<String, String> paramsMap) throws Exception {
        List<NameValuePair> params = new ArrayList<>();
        for (Map.Entry<String, String> e : paramsMap.entrySet()) {
            NameValuePair pair = new BasicNameValuePair(e.getKey(), e.getValue());
            params.add(pair);
        }
        HttpUriRequest postMethod = RequestBuilder.post().setUri(url)
                .addParameters(params.toArray(new BasicNameValuePair[params.size()]))
                .setConfig(requestConfig).build();
        TimeUnit.SECONDS.sleep(1);
        HttpResponse response = getConnection().execute(postMethod);
        return EntityUtils.toString(response.getEntity());
    }

    /**
     * http post请求，利用http请求池
     *
     * @param url     请求url
     * @param jsonStr json字符串
     * @return 请求结果
     * @throws Exception 异常
     */
    public static String httpPostJson(String url, String jsonStr) throws Exception {
        HttpUriRequest postMethod = RequestBuilder.post().setUri(url)
                .setHeader("Content-Type", "application/json;charset=utf-8")
                .setHeader("Accept", "application/json")
                .setEntity(new StringEntity(jsonStr, Charset.forName("UTF-8")))
                .setConfig(requestConfig).build();
        HttpResponse response = getConnection().execute(postMethod);
        return EntityUtils.toString(response.getEntity());
    }

    /**
     * http get请求，利用http请求池
     *
     * @param url 请求url
     * @return 请求结果
     * @throws Exception 异常
     */
    public static String httpGet(String url) throws Exception {
        RequestBuilder requestBuilder = RequestBuilder.get();
        // requestBuilder.addHeader("Cookie", "_gscu_1135684666=77507958dihe4f15");
        requestBuilder.addHeader("Referer", "http://spf.szfcweb.com/szfcweb/(S(prputvacw2gbrx4ghh2xovd1))/DataSerach/CanSaleHouseSelectIndex.aspx");
        requestBuilder.addHeader("User-Agent",
                "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.1 Safari/605.1.15");
        requestBuilder.addHeader("Host", "spf.szfcweb.com");
        requestBuilder.addHeader("Proxy-Connection", "keep-alive");
        requestBuilder.addHeader("Upgrade-Insecure-Requests",
                "1");
        requestBuilder.addHeader("Accept",
                "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
        HttpUriRequest getMethod = requestBuilder.setUri(url)
                .setConfig(requestConfig).build();
        TimeUnit.MILLISECONDS.sleep(300);
        HttpResponse response = getConnection().execute(getMethod);
        return EntityUtils.toString(response.getEntity());
    }

    /**
     * http get请求，利用http请求池
     *
     * @param url       请求url
     * @param paramsMap 请求参数
     * @return 请求结果
     * @throws Exception 异常
     */
    public static String httpGet(String url, Map<String, String> paramsMap, Supplier<Header> header) throws Exception {
        // List<NameValuePair> params = new ArrayList<>();
        // for (Map.Entry<String, String> e : paramsMap.entrySet()) {
        //     NameValuePair pair = new BasicNameValuePair(e.getKey(), e.getValue());
        //     params.add(pair);
        // }
        //
        // for (Map.Entry<String, String> e : paramsMap.entrySet()) {
        //     NameValuePair pair = new BasicNameValuePair(e.getKey(), e.getValue());
        //     params.add(pair);
        // }
        //
        //
        // HttpUriRequest getMethod = RequestBuilder.get().setUri(url)
        //         .addParameters(params.toArray(new BasicNameValuePair[params.size()])).addHeader(header.get())
        //         .setConfig(requestConfig).build();
        // HttpResponse response = getConnection().execute(getMethod);
        // return EntityUtils.toString(response.getEntity());
        return null;
    }

    /**
     * http post 请求,每次创建请求客户端
     *
     * @param url    url
     * @param params 请求参数
     * @return 请求返回值
     */
    public static String httpPostNoPool(String url, Map<String, String> params) {
        CloseableHttpClient closeableHttpClient = null;
        try {
            HttpPost httpPost = new HttpPost(url);
            if (params != null) {
                List<NameValuePair> form = new ArrayList<>();
                for (String name : params.keySet()) {
                    form.add(new BasicNameValuePair(name, params.get(name)));
                }
                httpPost.setEntity(new UrlEncodedFormEntity(form, HTTP.UTF_8));
            }
            closeableHttpClient = HttpClients.createDefault();
            CloseableHttpResponse httpResponse = closeableHttpClient.execute(httpPost);
            HttpEntity entry = httpResponse.getEntity();
            return EntityUtils.toString(entry);
        } catch (Exception e) {
            log.error("HttpUtil.httpPost failed!", e);
        } finally {
            if (null != closeableHttpClient) {
                try {
                    closeableHttpClient.close();
                } catch (IOException e) {
                    log.error("closeableHttpClient.close failed!", e);
                }
            }
        }
        return null;
    }

    private boolean considerAsGlobalException(Exception e) {
        boolean yesGlobalException = true;
        for (Class<? extends Exception> ignoredCls : IGNORED_EXCEPTION) {
            if (ignoredCls.isInstance(e)) {
                yesGlobalException = false;
                break;
            }
        }
        return yesGlobalException;
    }
    // private <T, U> int MultiFunction(BiFunction<T, U, Integer> doFunc,
    //                                         T parmT,
    //                                         U parmU,
    //                                         Integer r) {
    //     for (; ; ) {
    //         DoAndRetry.DResult<Integer> rst = DoAndRetry.doItAndRetryIfFailed(2, 200, (a, b) -> doFunc.apply(parmT, parmU), "a", "b",
    //                 (affect) -> true);
    //         // 最终失败了
    //         if (rst.e != null) {
    //             log.error("重试遇到异常，需要抛出,异常原因={},{}", rst.e.getClass().getSimpleName(), rst.e);
    //             if (considerAsGlobalException(rst.e)) {
    //                 // 未知异常，应该抛出来
    //                 DoAndRetry.rethrow(rst.e);
    //             } else {
    //                 // 给定异常中，继续重试下
    //                 DoAndRetry.rethrow(rst.e);
    //             }
    //         }
    //         if (rst.r != null && rst.r == 0) {
    //             break;
    //         }
    //     }
    //     return ;
    // }

}
